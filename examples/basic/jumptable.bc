; ModuleID = 'examples/basic/jumptable.c'
target datalayout = "E-S32-p:32:32:32-i8:8:8-i16:16:16-i32:32:32-i64:32:32-f64:32:32-a0:0:32-s0:32:32-v64:32:32-v128:32:32-n32"
target triple = "patmos-unknown-unknown-elf"

define i32 @test(i32 %arg) nounwind noinline {
entry:
  %arg.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %0 = load i32* %arg.addr, align 4
  %sub = sub nsw i32 20, %0
  store i32 %sub, i32* %i, align 4
  %1 = load i32* %arg.addr, align 4
  %sub1 = sub nsw i32 0, %1
  store i32 %sub1, i32* %j, align 4
  store i32 1, i32* %k, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %k, align 4
  %3 = load i32* %arg.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %rem = srem i32 %4, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %div = sdiv i32 %5, 2
  store i32 %div, i32* %i, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %6 = load i32* %i, align 4
  %mul = mul nsw i32 %6, 3
  %add = add nsw i32 %mul, 1
  store i32 %add, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32* %k, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32* %arg.addr, align 4
  %add2 = add nsw i32 %8, 4
  switch i32 %add2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
    i32 2, label %sw.bb4
    i32 3, label %sw.bb5
    i32 4, label %sw.bb6
    i32 5, label %sw.bb7
    i32 6, label %sw.bb8
  ]

sw.bb:                                            ; preds = %for.end
  store i32 40, i32* %i, align 4
  store i32 40, i32* %j, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.end
  store i32 20, i32* %i, align 4
  store i32 10, i32* %j, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.end
  store i32 30, i32* %i, align 4
  store i32 40, i32* %j, align 4
  br label %sw.epilog

sw.bb5:                                           ; preds = %for.end
  store i32 10, i32* %i, align 4
  br label %sw.epilog

sw.bb6:                                           ; preds = %for.end
  store i32 64, i32* %i, align 4
  store i32 15, i32* %j, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.end
  store i32 50, i32* %i, align 4
  br label %sw.epilog

sw.bb8:                                           ; preds = %for.end
  store i32 40, i32* %i, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb
  %9 = load i32* %i, align 4
  %10 = load i32* %j, align 4
  %add9 = add nsw i32 %9, %10
  ret i32 %add9
}

define i32 @main(i32 %argc, i8** %argv) nounwind {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %sub = sub nsw i32 %1, 10
  %call = call i32 @test(i32 %sub)
  %2 = load i32* %r, align 4
  %xor = xor i32 %call, %2
  store i32 %xor, i32* %r, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32* %r, align 4
  %cmp1 = icmp ne i32 %4, -124
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32* %retval
  ret i32 %5
}
