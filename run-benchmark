#!/bin/bash
usage() {
    echo "Usage: ${0} bindir outdir module.bc [bench]"
    echo "  <bindir> will contain module.elf, module.elf.pml and module.elf.bc"
    echo "  <outdir> will contain module.{ais,xml,apx,..}"
    echo "  <bench> is the benchmark script to run (bench-trace (default), bench-sweet)"
    echo "  PATMOS_CFLAGS is passed to patmos-clang"
    echo "  DEBUG if set, results in --debug to be passed to all tools involved"
    echo "  VERBOSE if set, results in --verbose to be passed to all tools involved"
    echo "  STATS if set, results in --stats to be passed to all tools involved"
    exit 1
}
trace_opts() {
    echo --binary "${ELF}"
}
ait_opts() {
    echo --ais "${MO}.ais"
    echo --report "${MO}.txt"
    echo --apx "${MO}.apx"
    echo --results "${MO}.xml"
    echo --header
}
sweet_opts() {
    if [ ! "${BENCHMARK}" == "bench-sweet" ] ; then
        return
    fi
    echo --bitcode "${ELFBC}"
    echo --alf "${BINDIR}/${M}.alf"
    echo --sweet-flowfacts "${MO}.ff"
    echo --sweet-trace "${MO}.tf"
}
opt() {
    cond=$1
    option=$2
    if [ ! -z "${cond}" ] ; then
        echo $option
    fi
}

if [ -z "${3}" ] ; then usage ; fi

BINDIR="${1}"
OUTDIR="${2}"
BC="${3}"
BENCHMARK="${4}"
if [ -z "$BENCHMARK" ] ; then
    BENCHMARK="bench-trace"
fi

M=$(basename "${BC}" .bc)
ELF="${BINDIR}/${M}.elf"
PML="${BINDIR}/${M}.elf.pml"
ELFBC="${BINDIR}/${M}.elf.bc"
if [ -z "${PATMOS_CFLAGS}" ] ; then
    PATMOS_CFLAGS="-O1"
fi
if [ ! -e "${BC}" ] ; then echo "${BC} not found" ; usage ; fi
if [ -z "`which patmos-clang`" ] ; then echo "patmos-clang command not found" ; exit 1 ; fi
set -x
patmos-clang ${PATMOS_CFLAGS} -o "${ELF}" -mpatmos-preemit-bitcode="${ELFBC}" -mpatmos-serialize="${PML}" "${BC}"
set +x
if [ $? -ne 0 ] ; then
    echo "Compilation failed (${BINDIR}/${M}.log)"
    exit 1
fi

# analyze
MO="${OUTDIR}/${M}"

./platin "${BENCHMARK}" "${PML}" --output "${MO}.pml" --analysis-entry main \
    $(trace_opts) \
    $(ait_opts) \
    $(sweet_opts) \
    $(opt "$VERBOSE" --verbose) \
    $(opt "$STATS" --stats) \
    $(opt "$DEBUG" --debug)
